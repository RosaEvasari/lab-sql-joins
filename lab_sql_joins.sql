USE sakila;


-- list the number of films per category
SELECT * FROM sakila.film_category;

SELECT 
	c.name as category_name,
    count(*) as number_of_film
FROM sakila.category as c
JOIN sakila.film_category as fc ON c.category_id = fc.category_id
GROUP BY c.name 
ORDER BY number_of_film;

-- Retrieve the store ID, city, and country for each store
SELECT * FROM sakila.store; -- store_id, address_id
SELECT * FROM sakila.city; -- city_id, city,country_id
SELECT * FROM sakila.country; -- country_id, country
SELECT * FROM sakila.address; -- address_id, city_id, 

SELECT 
	s.store_id,
    ci.city,
    co.country
FROM sakila.store as s
JOIN sakila.address as a ON s.address_id = a.address_id
JOIN sakila.city as ci ON a.city_id = ci.city_id
JOIN sakila.country as co ON ci.country_id = co.country_id;

-- Calculate the total revenue generated by each store in dollars
SELECT * FROM sakila.store; -- store_id, manager_staff_id
SELECT * FROM sakila.payment; -- staff_id, amount --> Group first based on staff_id
SELECT * FROM sakila.staff; -- staff_id, store_id

SELECT 
	sto.store_id,
    ROUND(SUM(p.amount)) as total_revenue
FROM sakila.payment as p -- Santiago used store here instead of payment because he said if the company opens new store, the result won't show the revenue of that store because it's still new.
JOIN sakila.staff as sta ON p.staff_id = sta.staff_id 
JOIN sakila.store as sto ON sta.store_id = sto.store_id
GROUP BY sto.store_id;

-- Another solution
SELECT
	sto.store_id,
    ROUND(SUM(p.amount)) as total_revenue
FROM sakila.store as sto
JOIN sakila.staff as sta ON sto.store_id = sta.store_id
JOIN sakila.payment as p ON sta.staff_id = p.staff_id
GROUP BY sto.store_id;


-- Determine the average running time of films for each category
 SELECT * FROM sakila.category; -- category_id, name
 SELECT * FROM sakila.film; -- film_id, length
 SELECT * FROM sakila.film_category; -- film_id, category_id

SELECT 
	c.name as category_name,
    ROUND(AVG(f.length)) as average_running_time
FROM sakila.category as c
JOIN sakila.film_category as fc ON c.category_id = fc.category_id
JOIN sakila.film as f ON fc.film_id = f.film_id 
GROUP BY c.name;

-- Identify the film categories with the longest average running time.
SELECT 
	c.name as category_name,
    ROUND(AVG(f.length)) as average_running_time
FROM sakila.category as c
JOIN sakila.film_category as fc ON c.category_id = fc.category_id
JOIN sakila.film as f ON fc.film_id = f.film_id
GROUP BY c.name
ORDER BY average_running_time DESC;

-- Display the top 10 most frequently rented movies in descending order.
SELECT * FROM sakila.rental; -- inventory_id
SELECT * FROM sakila.film; -- film_id, title
SELECT * FROM sakila.inventory; -- inventory_id, film_id

SELECT 
	COUNT(r.inventory_id) as frequency,
    f.title
FROM sakila.rental as r
JOIN sakila.inventory as i ON r.inventory_id = i.inventory_id
JOIN sakila.film as f ON i.film_id = f.film_id
GROUP BY r.inventory_id
ORDER BY frequency DESC;

-- another solution
SELECT 
	f.title,
    COUNT(r.rental_id) AS rental_count
FROM sakila.film as f
JOIN sakila.inventory as i ON f.film_id = i.film_id
JOIN sakila.rental as r ON i.inventory_id = r.inventory_id
GROUP BY f.film_id
ORDER BY rental_count DESC;


-- Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT * FROM sakila.film; -- film_id, title
SELECT * FROM sakila.rental; -- inventory_id, staff_id
SELECT * FROM sakila.inventory; -- inventory_id, film_id, store_id

SELECT 
	i.inventory_id
FROM sakila.inventory as i
JOIN sakila.film as f ON i.film_id = f.film_id
WHERE f.title = 'Academy Dinosaur' AND i.store_id = 1;


-- Provide a list of all distinct film titles, along with their availability status in the inventory.
SELECT * FROM sakila.inventory; -- inventory_id, film_id
SELECT * FROM sakila.film; -- film_id, title

SELECT 
	f.title,
    CASE 
		WHEN COUNT(i.film_id) = 0 THEN 'Not Available'
        ELSE 'Available'
	END AS rental_availability
FROM sakila.film as f
JOIN sakila.inventory as i ON f.film_id = i.film_id
GROUP BY f.title
ORDER BY f.title ASC;
 